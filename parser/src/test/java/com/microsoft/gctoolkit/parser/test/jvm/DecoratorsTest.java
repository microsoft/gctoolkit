// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
package com.microsoft.gctoolkit.parser.test.jvm;

import java.time.ZonedDateTime;

import com.microsoft.gctoolkit.parser.jvm.Decorators;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;


public class DecoratorsTest {
    /*
  JEP 158 Decorators
    time -- Current time and date in ISO-8601 format
    uptime -- Time since the start of the JVM in seconds and milliseconds (e.g., 6.567s)
    timemillis -- The same value as generated by System.currentTimeMillis()
    uptimemillis -- Milliseconds since the JVM started
    timenanos -- The same value as generated by System.nanoTime()
    uptimenanos -- Nanoseconds since the JVM started
    pid -- The process identifier
    tid -- The thread identifier
    level -- The level associated with the log message
    tags -- The tag-set associated with the log message
    [2018-04-04T09:10:00.586-0100][0.018s][1522825800586ms][18ms][10026341461044ns][17738937ns][1375][7427][info][gc] Using G1
 */

    private static final String[] decoratorsLines = {
            "Using G1",
            "[gc] Using G1",
            "[info][gc] Using G1",
            "[7427][info][gc] Using G1",
            "[1375][7427][info][gc] Using G1",
            "[17738937ns][1375][7427][info][gc] Using G1",
            "[10026341461044ns][17738937ns][1375][7427][info][gc] Using G1",
            "[18ms][10026341461044ns][17738937ns][1375][7427][info][gc] Using G1",
            "[1522825800586ms][18ms][10026341461044ns][17738937ns][1375][7427][info][gc] Using G1",
            "[0.018s][1522825800586ms][18ms][10026341461044ns][17738937ns][1375][7427][info][gc] Using G1",
            "[2018-04-04T09:10:00.586-0100][0.018s][1522825800586ms][18ms][10026341461044ns][17738937ns][1375][7427][info][gc] Using G1"
    };

    private static final String[] decoratorsValuesTestSupport = {
            "[2018-04-04T09:10:00.586-0100][0.018s][1522825800586ms][10026341461044ns][1375][7427][info][gc] Using G1",
            "[2018-04-04T09:10:00.586-0100][0.018s][18ms][17738937ns][1375][7427][info][gc] Using G1"
    };

    @Test
    public void decoratorsCounts() {
        for (int i = 0; i < decoratorsLines.length; i++) {
            Decorators decorators = new Decorators(decoratorsLines[i]);
            assertEquals(i, decorators.getNumberOfDecorators());
        }
    }

    @Test
    public void decoratorValues() {
        Decorators decorators = new Decorators(decoratorsValuesTestSupport[0]);
        assertEquals(1522825800586L, decorators.getTimeMillis(), "timestamp -> ");
        assertEquals(10026341461044L, decorators.getTimeNano(), "timestamp -> ");
        decorators = new Decorators(decoratorsValuesTestSupport[1]);
        assertEquals(18L, decorators.getUptimeMillis());
        assertEquals(17738937L, decorators.getUptimeNano());
    }

    @Test
    public void checkEachValue() {
        Decorators decorators = new Decorators(decoratorsLines[decoratorsLines.length - 1]);
        assertEquals(ZonedDateTime.parse("2018-04-04T09:10:00.586-01:00"), decorators.getDateStamp());
        assertEquals(18, (int) (decorators.getUpTime() * 1000.0d));
        assertEquals(1522825800586L, decorators.getTimeMillis());
        assertEquals(18L, decorators.getUptimeMillis());
        assertEquals(10026341461044L, decorators.getTimeNano());
        assertEquals(17738937L, decorators.getUptimeNano());
        assertEquals(1375, decorators.getPid());
        assertEquals(7427, decorators.getTid());
        Assertions.assertEquals("info", decorators.getLogLevel().orElseThrow(IllegalArgumentException::new).toString());
        assertTrue(decorators.tagsContain("gc"));
    }
}
